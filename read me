
###### IntelliFace API (Backend) ######

A powerful Node.js + MongoDB REST API backend for the 
**IntelliFace** platform â€” a smart attendance and user management 
system with integrated face recognition powered by Python microservices.

---

## Features

- JWT Authentication (Login & Registration)
- User & Role Management (Admin / Employee)
- Location-Based Attendance (Check-In/Check-Out)
- Face Recognition (via Flask Microservice)
- Dashboard Statistics
- Attendance Logs & Daily Tracking
- Department & Location CRUD APIs
- Profile & Face Image Uploads (Multer)

---

## Tech Stack

- **Node.js** / **Express**
- **MongoDB** / **Mongoose**
- **JWT** for Authentication
- **Multer** for File Uploads
- **Axios** for microservice communication
- **Python Flask** (external) for face processing

---

## Installation & Setup

---

## Project Structure

intelliface_api/
â”‚
â”œâ”€â”€ ðŸ“¦ config/
â”‚   â””â”€â”€ db.js                      # Optional: Mongoose DB connection logic
â”‚
â”œâ”€â”€ ðŸ“‚ controllers/                # Route handlers for business logic
â”‚   â”œâ”€â”€ attendanceController.js    # Attendance check-in/check-out
â”‚   â”œâ”€â”€ authController.js          # Login and registration logic
â”‚   â”œâ”€â”€ dashboardController.js     # Stats and metrics
â”‚   â”œâ”€â”€ departmentController.js    # CRUD for departments
â”‚   â”œâ”€â”€ locationController.js      # CRUD for geofenced locations
â”‚   â”œâ”€â”€ todo.controller.js         # Todo operations
â”‚   â”œâ”€â”€ userController.js          # Admin user/employee operations
â”‚   â””â”€â”€ userProfileController.js   # View and update profile info
â”‚
â”œâ”€â”€ ðŸ“‚ middleware/                 # Middlewares for auth and file upload
â”‚   â”œâ”€â”€ authMiddleware.js          # verifyToken, verifyAdmin
â”‚   â””â”€â”€ uploadMiddleware.js        # Multer config for profile images
â”‚
â”œâ”€â”€ ðŸ“‚ models/                     # Mongoose schemas/models
â”‚   â”œâ”€â”€ Attendance.js              # Attendance schema
â”‚   â”œâ”€â”€ Department.js              # Department schema
â”‚   â”œâ”€â”€ Location.js                # Location schema
â”‚   â”œâ”€â”€ Todo.js                    # Todo schema
â”‚   â””â”€â”€ User.js                    # Admin and employee model
â”‚
â”œâ”€â”€ ðŸ“‚ routes/                     # Route definitions and middleware chains
â”‚   â”œâ”€â”€ attendanceRoutes.js        # /api/attendance
â”‚   â”œâ”€â”€ authRoutes.js              # /api/auth
â”‚   â”œâ”€â”€ dashboardRoutes.js         # /api/dashboard
â”‚   â”œâ”€â”€ departmentRoutes.js        # /api/departments
â”‚   â”œâ”€â”€ faceRoutes.js              # /api/faces (enroll, verify)
â”‚   â”œâ”€â”€ locationRoutes.js          # /api/locations
â”‚   â”œâ”€â”€ profileRoutes.js           # /api/profile
â”‚   â”œâ”€â”€ todo.routes.js             # /api/todos
â”‚   â””â”€â”€ userRoutes.js              # /api/users
â”‚
â”œâ”€â”€ ðŸ“‚ services/                   # External service handlers
â”‚   â””â”€â”€ faceRecognitionService.js  # Handles HTTP requests to Python API
â”‚
â”œâ”€â”€ ðŸ“‚ uploads/                    # Uploaded profile and face images (via Multer)
â”‚   â””â”€â”€ [profile photos].jpg
â”‚
â”œâ”€â”€ ðŸ“œ createAdmin.js              # One-time script to create default admin
â”œâ”€â”€ ðŸ“œ server.js                   # Main entry point - sets up Express server
â”œâ”€â”€ ðŸ“œ .env                        # Environment variables (JWT_SECRET, DB, etc.)
â”œâ”€â”€ ðŸ“œ .env.example                # Sample template of .env for development
â”œâ”€â”€ ðŸ“œ package.json                # Project metadata and dependencies
â”œâ”€â”€ ðŸ“œ README.md                   # Project documentation
â””â”€â”€ ðŸ“œ .gitignore                  # Ignore node_modules, .env, etc.


---


```bash
# Clone the repository
git clone https://github.com/0samadel/intelliface_api
cd intelliface_api

# Install dependencies
npm install

# Create .env file
cp .env.example .env

# Start the server
npm run dev


